int symbol_rec(Mat frame){
Mat Purple_HSV;

while(frame.empty())
            frame = captureFrame(); // Capture a frame from the camera and store in a new matrix variable
            cvtColor(frame, Purple_HSV, COLOR_BGR2HSV);

                Mat blackMask;
                 inRange(Purple_HSV, Scalar(hue_min, saturation_min, value_min), Scalar(hue_max, saturtion_max, value_max), Purple_HSV);

                  std::vector< std::vector<cv::Point> > contours; // Variable for list of
        std::vector<Vec4i> hierarchy; // Variable for image topology data
        cv::findContours(Purple_HSV, contours, hierarchy, RETR_TREE, CHAIN_APPROX_SIMPLE, Point(0,0));


        if (contours.size() > 0)
        {
            //std::vector<std::vector<cv::Point>>approxContours(contours.size());
            int maxArea = 0;
            int maxArea_index = -1;
            for(int i = 0; i < contours.size(); i++)  // Loop through the contours
            {

                int area = cv::contourArea(contours[i]);
                if ( area > maxArea)
                {
                    maxArea = area;
                    maxArea_index = i;
                }
            }
            std::vector< std::vector<cv::Point> > approxedcontours(contours.size());
            //Array for new contours
            for(int i = 0; i < contours.size(); i++)
            {
                cv::approxPolyDP(contours[i],approxedcontours[i], 10, true);
                regionCentre = findContourCentre(contours[i]);
                //Approximate the contour
            }
            if (maxArea_index != -1)
                drawContours( frame, approxedcontours, maxArea_index, Scalar(0,0,255), 2, LINE_8, noArray(), 0,Point());
            imshow("redcontour", frame);
            //regionCentre = findContourCentre(contours[i]); // Calculate the centre point
            //printf("Contour centre: x = %dpx, y = %dpx\n", regionCentre.x,regionCentre.y);
            return 0;

}